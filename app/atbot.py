from parse_web import logging_site, parse_site
import logging
import asyncio
import config

from sqlighter import SQLighter

from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = config.API_TOKEN

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = SQLighter('db.db')
db.create()

addr = config.addr


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help
    """
    await message.reply(''' 
    –ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ Dad_on_parsing bot!
    –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–µ–Ω—è –∏ —Ç–æ–≥–¥–∞ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.
    –¢–∞–∫–∂–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
    –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏—Ñ—Ä–æ–π 1, 2 –∏–ª–∏ 3.
    1. Dualsense
    2. PS5
    3. PS5 Digital
    –£–¥–∞—á–∏!
                            ''')

# –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    if (not db.subscriber_exists(message.from_user.id)):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        db.add_subscriber(message.from_user.id)
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(message.from_user.id, True)

    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø–∞—Ä—Å–µ—Ä!\n–ñ–¥–∏—Ç–µ, —Å–∫–æ—Ä–æ –û–ù–ò –ø–æ—è–≤—è—Ç—Å—è üòé")




# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏
@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: types.Message):

    if(not db.subscriber_exists(message.from_user.id)):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º)
        db.add_subscriber(message.from_user.id, False)
        await message.answer("–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(message.from_user.id, False)
        await message.answer("–•–µ—Ä —Ç–µ–±–µ. –ù–µ –æ—á–µ–Ω—å-—Ç–æ –∏ —Ö–æ—Ç–µ–ª–æ—Å—å üñï")


# –í—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
def login_site():
    global br
    br = logging_site()


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
@dp.message_handler()
async def choose_parse(message: types.Message):

    input_parse = message.text
    # print(input_parse) # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
    if int(input_parse) in addr:
        try:
            login_site()
            name_check, in_stock_check, price_check, button_check = parse_site(addr[int(input_parse)], br)
        except:
            name_check, in_stock_check, price_check, button_check = parse_site(addr[int(input_parse)], br)

        # print(name_check, in_stock_check, addr[int(input_parse)], price_check) # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await message.answer(f'{name_check} {in_stock_check} {addr[int(input_parse)]} {price_check}‚Ç¨')

    else:
        await message.answer('–í—ã –æ—à–∏–±–ª–∏—Å—å –≤ –≤—ã–±–æ—Ä–µ.')


# –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏
async def scheduled(wait_for, addr):
    while True:
        await asyncio.sleep(wait_for)
        try:
            login_site()
            name_check, in_stock_check, price_check, button_check = parse_site(addr, br)
        except:
            name_check, in_stock_check, price_check, button_check = parse_site(addr, br)

        if in_stock_check == 'In stock' and button_check:
            subscriptions = db.get_subscriptions()
            for s in subscriptions:
                await bot.send_message(s[1], f'‚ÄºÔ∏è‚ÄºÔ∏è{name_check} {in_stock_check} {addr} {price_check}‚Ç¨‚ÄºÔ∏è‚ÄºÔ∏è')
        # else:
        #     print(f'none {addr}') # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã



if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduled(50, addr[2]))
    loop.create_task(scheduled(50, addr[3]))
    executor.start_polling(dp, skip_updates=True)
